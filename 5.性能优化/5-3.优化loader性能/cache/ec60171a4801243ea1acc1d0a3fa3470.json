{"remainingRequest":"E:\\前端学习\\2020-bloom\\web-project\\5.性能优化\\5-3.优化loader性能\\node_modules\\_babel-loader@8.2.2@babel-loader\\lib\\index.js!E:\\前端学习\\2020-bloom\\web-project\\5.性能优化\\5-3.优化loader性能\\node_modules\\_source-map@0.7.3@source-map\\lib\\source-node.js","dependencies":[{"path":"E:\\前端学习\\2020-bloom\\web-project\\5.性能优化\\5-3.优化loader性能\\node_modules\\_source-map@0.7.3@source-map\\lib\\source-node.js","mtime":1526491281000},{"path":"E:\\前端学习\\2020-bloom\\web-project\\5.性能优化\\5-3.优化loader性能\\node_modules\\_cache-loader@4.1.0@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\前端学习\\2020-bloom\\web-project\\5.性能优化\\5-3.优化loader性能\\node_modules\\_babel-loader@8.2.2@babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["E:/前端学习/2020-bloom/web-project/5.性能优化/5-3.优化loader性能/node_modules/_source-map@0.7.3@source-map/lib/source-node.js"],"names":["SourceMapGenerator","require","util","REGEX_NEWLINE","NEWLINE_CODE","isSourceNode","SourceNode","constructor","aLine","aColumn","aSource","aChunks","aName","children","sourceContents","line","column","source","name","add","fromStringWithSourceMap","aGeneratedCode","aSourceMapConsumer","aRelativePath","node","remainingLines","split","remainingLinesIndex","shiftNextLine","lineContents","getNextLine","newLine","length","undefined","lastGeneratedLine","lastGeneratedColumn","lastMapping","nextLine","eachMapping","mapping","generatedLine","addMappingWithCode","code","substr","generatedColumn","splice","join","sources","forEach","sourceFile","content","sourceContentFor","setSourceContent","originalLine","originalColumn","aChunk","Array","isArray","chunk","push","TypeError","prepend","i","unshift","walk","aFn","len","aSep","newChildren","replaceRight","aPattern","aReplacement","lastChild","replace","aSourceFile","aSourceContent","toSetString","walkSourceContents","Object","keys","fromSetString","toString","str","toStringWithSourceMap","aArgs","generated","map","sourceMappingActive","lastOriginalSource","lastOriginalLine","lastOriginalColumn","lastOriginalName","original","addMapping","idx","charCodeAt","sourceContent","exports"],"mappings":"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","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst SourceMapGenerator = require(\"./source-map-generator\").SourceMapGenerator;\nconst util = require(\"./util\");\n\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nconst REGEX_NEWLINE = /(\\r?\\n)/;\n\n// Newline character code for charCodeAt() comparisons\nconst NEWLINE_CODE = 10;\n\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nconst isSourceNode = \"$$$isSourceNode$$$\";\n\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\nclass SourceNode {\n  constructor(aLine, aColumn, aSource, aChunks, aName) {\n    this.children = [];\n    this.sourceContents = {};\n    this.line = aLine == null ? null : aLine;\n    this.column = aColumn == null ? null : aColumn;\n    this.source = aSource == null ? null : aSource;\n    this.name = aName == null ? null : aName;\n    this[isSourceNode] = true;\n    if (aChunks != null) this.add(aChunks);\n  }\n\n  /**\n   * Creates a SourceNode from generated code and a SourceMapConsumer.\n   *\n   * @param aGeneratedCode The generated code\n   * @param aSourceMapConsumer The SourceMap for the generated code\n   * @param aRelativePath Optional. The path that relative sources in the\n   *        SourceMapConsumer should be relative to.\n   */\n  static fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    const node = new SourceNode();\n\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are accessed by calling `shiftNextLine`.\n    const remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    let remainingLinesIndex = 0;\n    const shiftNextLine = function() {\n      const lineContents = getNextLine();\n      // The last line of a file might not have a newline.\n      const newLine = getNextLine() || \"\";\n      return lineContents + newLine;\n\n      function getNextLine() {\n        return remainingLinesIndex < remainingLines.length ?\n            remainingLines[remainingLinesIndex++] : undefined;\n      }\n    };\n\n    // We need to remember the position of \"remainingLines\"\n    let lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    let lastMapping = null;\n    let nextLine;\n\n    aSourceMapConsumer.eachMapping(function(mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0;\n          // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          nextLine = remainingLines[remainingLinesIndex] || \"\";\n          const code = nextLine.substr(0, mapping.generatedColumn -\n                                        lastGeneratedColumn);\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -\n                                              lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code);\n          // No more remaining code, continue\n          lastMapping = mapping;\n          return;\n        }\n      }\n      // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        nextLine = remainingLines[remainingLinesIndex] || \"\";\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n      lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLinesIndex < remainingLines.length) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      }\n      // and add the remaining lines without any mapping\n      node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n    }\n\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function(sourceFile) {\n      const content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n\n    return node;\n\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        const source = aRelativePath\n          ? util.join(aRelativePath, mapping.source)\n          : mapping.source;\n        node.add(new SourceNode(mapping.originalLine,\n                                mapping.originalColumn,\n                                source,\n                                code,\n                                mapping.name));\n      }\n    }\n  }\n\n  /**\n   * Add a chunk of generated JS to this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  add(aChunk) {\n    if (Array.isArray(aChunk)) {\n      aChunk.forEach(function(chunk) {\n        this.add(chunk);\n      }, this);\n    } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      if (aChunk) {\n        this.children.push(aChunk);\n      }\n    } else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  }\n\n  /**\n   * Add a chunk of generated JS to the beginning of this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  prepend(aChunk) {\n    if (Array.isArray(aChunk)) {\n      for (let i = aChunk.length - 1; i >= 0; i--) {\n        this.prepend(aChunk[i]);\n      }\n    } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      this.children.unshift(aChunk);\n    } else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  }\n\n  /**\n   * Walk over the tree of JS snippets in this node and its children. The\n   * walking function is called once for each snippet of JS and is passed that\n   * snippet and the its original associated source's line/column location.\n   *\n   * @param aFn The traversal function.\n   */\n  walk(aFn) {\n    let chunk;\n    for (let i = 0, len = this.children.length; i < len; i++) {\n      chunk = this.children[i];\n      if (chunk[isSourceNode]) {\n        chunk.walk(aFn);\n      } else if (chunk !== \"\") {\n        aFn(chunk, { source: this.source,\n                      line: this.line,\n                      column: this.column,\n                      name: this.name });\n      }\n    }\n  }\n\n  /**\n   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n   * each of `this.children`.\n   *\n   * @param aSep The separator.\n   */\n  join(aSep) {\n    let newChildren;\n    let i;\n    const len = this.children.length;\n    if (len > 0) {\n      newChildren = [];\n      for (i = 0; i < len - 1; i++) {\n        newChildren.push(this.children[i]);\n        newChildren.push(aSep);\n      }\n      newChildren.push(this.children[i]);\n      this.children = newChildren;\n    }\n    return this;\n  }\n\n  /**\n   * Call String.prototype.replace on the very right-most source snippet. Useful\n   * for trimming whitespace from the end of a source node, etc.\n   *\n   * @param aPattern The pattern to replace.\n   * @param aReplacement The thing to replace the pattern with.\n   */\n  replaceRight(aPattern, aReplacement) {\n    const lastChild = this.children[this.children.length - 1];\n    if (lastChild[isSourceNode]) {\n      lastChild.replaceRight(aPattern, aReplacement);\n    } else if (typeof lastChild === \"string\") {\n      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n    } else {\n      this.children.push(\"\".replace(aPattern, aReplacement));\n    }\n    return this;\n  }\n\n  /**\n   * Set the source content for a source file. This will be added to the SourceMapGenerator\n   * in the sourcesContent field.\n   *\n   * @param aSourceFile The filename of the source file\n   * @param aSourceContent The content of the source file\n   */\n  setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  }\n\n  /**\n   * Walk over the tree of SourceNodes. The walking function is called for each\n   * source file content and is passed the filename and source content.\n   *\n   * @param aFn The traversal function.\n   */\n  walkSourceContents(aFn) {\n    for (let i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n\n    const sources = Object.keys(this.sourceContents);\n    for (let i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  }\n\n  /**\n   * Return the string representation of this source node. Walks over the tree\n   * and concatenates all the various snippets together to one string.\n   */\n  toString() {\n    let str = \"\";\n    this.walk(function(chunk) {\n      str += chunk;\n    });\n    return str;\n  }\n\n  /**\n   * Returns the string representation of this source node along with a source\n   * map.\n   */\n  toStringWithSourceMap(aArgs) {\n    const generated = {\n      code: \"\",\n      line: 1,\n      column: 0\n    };\n    const map = new SourceMapGenerator(aArgs);\n    let sourceMappingActive = false;\n    let lastOriginalSource = null;\n    let lastOriginalLine = null;\n    let lastOriginalColumn = null;\n    let lastOriginalName = null;\n    this.walk(function(chunk, original) {\n      generated.code += chunk;\n      if (original.source !== null\n          && original.line !== null\n          && original.column !== null) {\n        if (lastOriginalSource !== original.source\n          || lastOriginalLine !== original.line\n          || lastOriginalColumn !== original.column\n          || lastOriginalName !== original.name) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n        lastOriginalSource = original.source;\n        lastOriginalLine = original.line;\n        lastOriginalColumn = original.column;\n        lastOriginalName = original.name;\n        sourceMappingActive = true;\n      } else if (sourceMappingActive) {\n        map.addMapping({\n          generated: {\n            line: generated.line,\n            column: generated.column\n          }\n        });\n        lastOriginalSource = null;\n        sourceMappingActive = false;\n      }\n      for (let idx = 0, length = chunk.length; idx < length; idx++) {\n        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n          generated.line++;\n          generated.column = 0;\n          // Mappings end at eol\n          if (idx + 1 === length) {\n            lastOriginalSource = null;\n            sourceMappingActive = false;\n          } else if (sourceMappingActive) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n        } else {\n          generated.column++;\n        }\n      }\n    });\n    this.walkSourceContents(function(sourceFile, sourceContent) {\n      map.setSourceContent(sourceFile, sourceContent);\n    });\n\n    return { code: generated.code, map };\n  }\n}\n\nexports.SourceNode = SourceNode;\n"]}]}